'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.3615
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------
Namespace WindowsApplication3

    ''' <summary>
    ''' Represents a strongly typed in-memory cache of data.
    ''' </summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>
    <Global.System.SerializableAttribute()>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code")>
    <Global.System.ComponentModel.ToolboxItemAttribute(True)>
    <Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")>
    <Global.System.Xml.Serialization.XmlRootAttribute("nwindDataSet")>
    <Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>
    Public Partial Class nwindDataSet
        Inherits Global.System.Data.DataSet

        Private tableOrder_Details As WindowsApplication3.nwindDataSet.Order_DetailsDataTable

        Private tableOrders As WindowsApplication3.nwindDataSet.OrdersDataTable

        Private relationOrdersOrder_Details As Global.System.Data.DataRelation

        Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        Public Sub New()
            Me.BeginInit()
            Me.InitClass()
            Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = New Global.System.ComponentModel.CollectionChangeEventHandler(AddressOf Me.SchemaChanged)
            AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
            AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
            Me.EndInit()
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context, False)
            If(Me.IsBinarySerialized(info, context) = True) Then
                Me.InitVars(False)
                Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = New Global.System.ComponentModel.CollectionChangeEventHandler(AddressOf Me.SchemaChanged)
                AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
                AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
                Return
            End If

            Dim strSchema As String =(CStr((info.GetValue("XmlSchema", GetType(String)))))
            If(Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
                Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
                ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
                If(ds.Tables("Order Details") IsNot Nothing) Then
                    MyBase.Tables.Add(New WindowsApplication3.nwindDataSet.Order_DetailsDataTable(ds.Tables("Order Details")))
                End If

                If(ds.Tables("Orders") IsNot Nothing) Then
                    MyBase.Tables.Add(New WindowsApplication3.nwindDataSet.OrdersDataTable(ds.Tables("Orders")))
                End If

                Me.DataSetName = ds.DataSetName
                Me.Prefix = ds.Prefix
                Me.[Namespace] = ds.[Namespace]
                Me.Locale = ds.Locale
                Me.CaseSensitive = ds.CaseSensitive
                Me.EnforceConstraints = ds.EnforceConstraints
                Me.Merge(ds, False, Global.System.Data.MissingSchemaAction.Add)
                Me.InitVars()
            Else
                Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            End If

            Me.GetSerializationData(info, context)
            Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = New Global.System.ComponentModel.CollectionChangeEventHandler(AddressOf Me.SchemaChanged)
            AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.ComponentModel.BrowsableAttribute(False)>
        <Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>
        Public ReadOnly Property Order_Details As Order_DetailsDataTable
            Get
                Return Me.tableOrder_Details
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.ComponentModel.BrowsableAttribute(False)>
        <Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>
        Public ReadOnly Property Orders As OrdersDataTable
            Get
                Return Me.tableOrders
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.ComponentModel.BrowsableAttribute(True)>
        <Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>
        Public Overrides Property SchemaSerializationMode As Global.System.Data.SchemaSerializationMode
            Get
                Return Me._schemaSerializationMode
            End Get

            Set(ByVal value As Global.System.Data.SchemaSerializationMode)
                Me._schemaSerializationMode = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>
        Public Overloads ReadOnly Property Tables As Global.System.Data.DataTableCollection
            Get
                Return MyBase.Tables
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>
        Public Overloads ReadOnly Property Relations As Global.System.Data.DataRelationCollection
            Get
                Return MyBase.Relations
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        Protected Overrides Sub InitializeDerivedDataSet()
            Me.BeginInit()
            Me.InitClass()
            Me.EndInit()
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        Public Overrides Function Clone() As Global.System.Data.DataSet
            Dim cln As WindowsApplication3.nwindDataSet = CType((MyBase.Clone()), WindowsApplication3.nwindDataSet)
            cln.InitVars()
            cln.SchemaSerializationMode = Me.SchemaSerializationMode
            Return cln
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        Protected Overrides Function ShouldSerializeTables() As Boolean
            Return False
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        Protected Overrides Function ShouldSerializeRelations() As Boolean
            Return False
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
            If(Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
                Me.Reset()
                Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
                ds.ReadXml(reader)
                If(ds.Tables("Order Details") IsNot Nothing) Then
                    MyBase.Tables.Add(New WindowsApplication3.nwindDataSet.Order_DetailsDataTable(ds.Tables("Order Details")))
                End If

                If(ds.Tables("Orders") IsNot Nothing) Then
                    MyBase.Tables.Add(New WindowsApplication3.nwindDataSet.OrdersDataTable(ds.Tables("Orders")))
                End If

                Me.DataSetName = ds.DataSetName
                Me.Prefix = ds.Prefix
                Me.[Namespace] = ds.[Namespace]
                Me.Locale = ds.Locale
                Me.CaseSensitive = ds.CaseSensitive
                Me.EnforceConstraints = ds.EnforceConstraints
                Me.Merge(ds, False, Global.System.Data.MissingSchemaAction.Add)
                Me.InitVars()
            Else
                Me.ReadXml(reader)
                Me.InitVars()
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
            Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
            stream.Position = 0
            Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        Friend Sub InitVars()
            Me.InitVars(True)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        Friend Sub InitVars(ByVal initTable As Boolean)
            Me.tableOrder_Details = CType((MyBase.Tables("Order Details")), WindowsApplication3.nwindDataSet.Order_DetailsDataTable)
            If(initTable = True) Then
                If(Me.tableOrder_Details IsNot Nothing) Then
                    Me.tableOrder_Details.InitVars()
                End If
            End If

            Me.tableOrders = CType((MyBase.Tables("Orders")), WindowsApplication3.nwindDataSet.OrdersDataTable)
            If(initTable = True) Then
                If(Me.tableOrders IsNot Nothing) Then
                    Me.tableOrders.InitVars()
                End If
            End If

            Me.relationOrdersOrder_Details = Me.Relations("OrdersOrder Details")
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        Private Sub InitClass()
            Me.DataSetName = "nwindDataSet"
            Me.Prefix = ""
            Me.[Namespace] = "http://tempuri.org/nwindDataSet.xsd"
            Me.EnforceConstraints = True
            Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
            Me.tableOrder_Details = New WindowsApplication3.nwindDataSet.Order_DetailsDataTable()
            MyBase.Tables.Add(Me.tableOrder_Details)
            Me.tableOrders = New WindowsApplication3.nwindDataSet.OrdersDataTable()
            MyBase.Tables.Add(Me.tableOrders)
            Me.relationOrdersOrder_Details = New Global.System.Data.DataRelation("OrdersOrder Details", New Global.System.Data.DataColumn() {Me.tableOrders.OrderIDColumn}, New Global.System.Data.DataColumn() {Me.tableOrder_Details.OrderIDColumn}, False)
            Me.Relations.Add(Me.relationOrdersOrder_Details)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        Private Function ShouldSerializeOrder_Details() As Boolean
            Return False
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        Private Function ShouldSerializeOrders() As Boolean
            Return False
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
            If(e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
                Me.InitVars()
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim ds As WindowsApplication3.nwindDataSet = New WindowsApplication3.nwindDataSet()
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any.[Namespace] = ds.[Namespace]
            sequence.Items.Add(any)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable()
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(CStr((dsSchema.TargetNamespace))).GetEnumerator()
                    While schemas.MoveNext()
                        schema = CType((schemas.Current), Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If(s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            While((s1.Position <> s1.Length) AndAlso (s1.ReadByte() = s2.ReadByte()))
                            End While

                            If(s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                    End While
                Finally
                    If(s1 IsNot Nothing) Then
                        s1.Close()
                    End If

                    If(s2 IsNot Nothing) Then
                        s2.Close()
                    End If
                End Try
            End If

            xs.Add(dsSchema)
            Return type
        End Function

        Public Delegate Sub Order_DetailsRowChangeEventHandler(ByVal sender As Object, ByVal e As WindowsApplication3.nwindDataSet.Order_DetailsRowChangeEvent)

        Public Delegate Sub OrdersRowChangeEventHandler(ByVal sender As Object, ByVal e As WindowsApplication3.nwindDataSet.OrdersRowChangeEvent)

        ''' <summary>
        ''' Represents the strongly named DataTable class.
        ''' </summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>
        <Global.System.SerializableAttribute()>
        <Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>
        Public Partial Class Order_DetailsDataTable
            Inherits Global.System.Data.DataTable
            Implements Global.System.Collections.IEnumerable

            Private columnOrderID As Global.System.Data.DataColumn

            Private columnProductID As Global.System.Data.DataColumn

            Private columnUnitPrice As Global.System.Data.DataColumn

            Private columnQuantity As Global.System.Data.DataColumn

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Public Sub New()
                Me.TableName = "Order Details"
                Me.BeginInit()
                Me.InitClass()
                Me.EndInit()
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Friend Sub New(ByVal table As Global.System.Data.DataTable)
                Me.TableName = table.TableName
                If(table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                    Me.CaseSensitive = table.CaseSensitive
                End If

                If(Not Equals(table.Locale.ToString(), table.DataSet.Locale.ToString())) Then
                    Me.Locale = table.Locale
                End If

                If(Not Equals(table.[Namespace], table.DataSet.[Namespace])) Then
                    Me.[Namespace] = table.[Namespace]
                End If

                Me.Prefix = table.Prefix
                Me.MinimumCapacity = table.MinimumCapacity
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
                MyBase.New(info, context)
                Me.InitVars()
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Public ReadOnly Property OrderIDColumn As Global.System.Data.DataColumn
                Get
                    Return Me.columnOrderID
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Public ReadOnly Property ProductIDColumn As Global.System.Data.DataColumn
                Get
                    Return Me.columnProductID
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Public ReadOnly Property UnitPriceColumn As Global.System.Data.DataColumn
                Get
                    Return Me.columnUnitPrice
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Public ReadOnly Property QuantityColumn As Global.System.Data.DataColumn
                Get
                    Return Me.columnQuantity
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.ComponentModel.BrowsableAttribute(False)>
            Public ReadOnly Property Count As Integer
                Get
                    Return Me.Rows.Count
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Default Public ReadOnly Property Item(ByVal index As Integer) As Order_DetailsRow
                Get
                    Return CType((Me.Rows(index)), WindowsApplication3.nwindDataSet.Order_DetailsRow)
                End Get
            End Property

            Public Event Order_DetailsRowChanging As WindowsApplication3.nwindDataSet.Order_DetailsRowChangeEventHandler

            Public Event Order_DetailsRowChanged As WindowsApplication3.nwindDataSet.Order_DetailsRowChangeEventHandler

            Public Event Order_DetailsRowDeleting As WindowsApplication3.nwindDataSet.Order_DetailsRowChangeEventHandler

            Public Event Order_DetailsRowDeleted As WindowsApplication3.nwindDataSet.Order_DetailsRowChangeEventHandler

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Public Sub AddOrder_DetailsRow(ByVal row As WindowsApplication3.nwindDataSet.Order_DetailsRow)
                Me.Rows.Add(row)
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Public Function AddOrder_DetailsRow(ByVal parentOrdersRowByOrdersOrder_Details As WindowsApplication3.nwindDataSet.OrdersRow, ByVal ProductID As Integer, ByVal UnitPrice As Decimal, ByVal Quantity As Short) As Order_DetailsRow
                Dim rowOrder_DetailsRow As WindowsApplication3.nwindDataSet.Order_DetailsRow = CType((Me.NewRow()), WindowsApplication3.nwindDataSet.Order_DetailsRow)
                Dim columnValuesArray As Object() = New Object() {Nothing, ProductID, UnitPrice, Quantity}
                If(parentOrdersRowByOrdersOrder_Details IsNot Nothing) Then
                    columnValuesArray(0) = parentOrdersRowByOrdersOrder_Details(0)
                End If

                rowOrder_DetailsRow.ItemArray = columnValuesArray
                Me.Rows.Add(rowOrder_DetailsRow)
                Return rowOrder_DetailsRow
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Public Function FindByOrderIDProductID(ByVal OrderID As Integer, ByVal ProductID As Integer) As Order_DetailsRow
                Return CType((Me.Rows.Find(New Object() {OrderID, ProductID})), WindowsApplication3.nwindDataSet.Order_DetailsRow)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
                Return Me.Rows.GetEnumerator()
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Public Overrides Function Clone() As Global.System.Data.DataTable
                Dim cln As WindowsApplication3.nwindDataSet.Order_DetailsDataTable = CType((MyBase.Clone()), WindowsApplication3.nwindDataSet.Order_DetailsDataTable)
                cln.InitVars()
                Return cln
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
                Return New WindowsApplication3.nwindDataSet.Order_DetailsDataTable()
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Friend Sub InitVars()
                Me.columnOrderID = Me.Columns("OrderID")
                Me.columnProductID = Me.Columns("ProductID")
                Me.columnUnitPrice = Me.Columns("UnitPrice")
                Me.columnQuantity = Me.Columns("Quantity")
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Private Sub InitClass()
                Me.columnOrderID = New Global.System.Data.DataColumn("OrderID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                Me.Columns.Add(Me.columnOrderID)
                Me.columnProductID = New Global.System.Data.DataColumn("ProductID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                Me.Columns.Add(Me.columnProductID)
                Me.columnUnitPrice = New Global.System.Data.DataColumn("UnitPrice", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
                Me.Columns.Add(Me.columnUnitPrice)
                Me.columnQuantity = New Global.System.Data.DataColumn("Quantity", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
                Me.Columns.Add(Me.columnQuantity)
                Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnOrderID, Me.columnProductID}, True))
                Me.columnOrderID.AllowDBNull = False
                Me.columnProductID.AllowDBNull = False
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Public Function NewOrder_DetailsRow() As Order_DetailsRow
                Return CType((Me.NewRow()), WindowsApplication3.nwindDataSet.Order_DetailsRow)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
                Return New WindowsApplication3.nwindDataSet.Order_DetailsRow(builder)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Protected Overrides Function GetRowType() As Global.System.Type
                Return GetType(WindowsApplication3.nwindDataSet.Order_DetailsRow)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanged(e)
                RaiseEvent Order_DetailsRowChanged(Me, New WindowsApplication3.nwindDataSet.Order_DetailsRowChangeEvent(CType((e.Row), WindowsApplication3.nwindDataSet.Order_DetailsRow), e.Action))
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanging(e)
                RaiseEvent Order_DetailsRowChanging(Me, New WindowsApplication3.nwindDataSet.Order_DetailsRowChangeEvent(CType((e.Row), WindowsApplication3.nwindDataSet.Order_DetailsRow), e.Action))
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleted(e)
                RaiseEvent Order_DetailsRowDeleted(Me, New WindowsApplication3.nwindDataSet.Order_DetailsRowChangeEvent(CType((e.Row), WindowsApplication3.nwindDataSet.Order_DetailsRow), e.Action))
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleting(e)
                RaiseEvent Order_DetailsRowDeleting(Me, New WindowsApplication3.nwindDataSet.Order_DetailsRowChangeEvent(CType((e.Row), WindowsApplication3.nwindDataSet.Order_DetailsRow), e.Action))
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Public Sub RemoveOrder_DetailsRow(ByVal row As WindowsApplication3.nwindDataSet.Order_DetailsRow)
                Me.Rows.Remove(row)
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
                Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
                Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
                Dim ds As WindowsApplication3.nwindDataSet = New WindowsApplication3.nwindDataSet()
                Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
                any1.[Namespace] = "http://www.w3.org/2001/XMLSchema"
                any1.MinOccurs = New Decimal(0)
                any1.MaxOccurs = Decimal.MaxValue
                any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any1)
                Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
                any2.[Namespace] = "urn:schemas-microsoft-com:xml-diffgram-v1"
                any2.MinOccurs = New Decimal(1)
                any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any2)
                Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
                attribute1.Name = "namespace"
                attribute1.FixedValue = ds.[Namespace]
                type.Attributes.Add(attribute1)
                Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
                attribute2.Name = "tableTypeName"
                attribute2.FixedValue = "Order_DetailsDataTable"
                type.Attributes.Add(attribute2)
                type.Particle = sequence
                Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable()
                If xs.Contains(dsSchema.TargetNamespace) Then
                    Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                    Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                    Try
                        Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                        dsSchema.Write(s1)
                        Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(CStr((dsSchema.TargetNamespace))).GetEnumerator()
                        While schemas.MoveNext()
                            schema = CType((schemas.Current), Global.System.Xml.Schema.XmlSchema)
                            s2.SetLength(0)
                            schema.Write(s2)
                            If(s1.Length = s2.Length) Then
                                s1.Position = 0
                                s2.Position = 0
                                While((s1.Position <> s1.Length) AndAlso (s1.ReadByte() = s2.ReadByte()))
                                End While

                                If(s1.Position = s1.Length) Then
                                    Return type
                                End If
                            End If
                        End While
                    Finally
                        If(s1 IsNot Nothing) Then
                            s1.Close()
                        End If

                        If(s2 IsNot Nothing) Then
                            s2.Close()
                        End If
                    End Try
                End If

                xs.Add(dsSchema)
                Return type
            End Function
        End Class

        ''' <summary>
        ''' Represents the strongly named DataTable class.
        ''' </summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>
        <Global.System.SerializableAttribute()>
        <Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>
        Public Partial Class OrdersDataTable
            Inherits Global.System.Data.DataTable
            Implements Global.System.Collections.IEnumerable

            Private columnOrderID As Global.System.Data.DataColumn

            Private columnCustomerID As Global.System.Data.DataColumn

            Private columnEmployeeID As Global.System.Data.DataColumn

            Private columnRequiredDate As Global.System.Data.DataColumn

            Private columnShipVia As Global.System.Data.DataColumn

            Private columnFreight As Global.System.Data.DataColumn

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Public Sub New()
                Me.TableName = "Orders"
                Me.BeginInit()
                Me.InitClass()
                Me.EndInit()
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Friend Sub New(ByVal table As Global.System.Data.DataTable)
                Me.TableName = table.TableName
                If(table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                    Me.CaseSensitive = table.CaseSensitive
                End If

                If(Not Equals(table.Locale.ToString(), table.DataSet.Locale.ToString())) Then
                    Me.Locale = table.Locale
                End If

                If(Not Equals(table.[Namespace], table.DataSet.[Namespace])) Then
                    Me.[Namespace] = table.[Namespace]
                End If

                Me.Prefix = table.Prefix
                Me.MinimumCapacity = table.MinimumCapacity
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
                MyBase.New(info, context)
                Me.InitVars()
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Public ReadOnly Property OrderIDColumn As Global.System.Data.DataColumn
                Get
                    Return Me.columnOrderID
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Public ReadOnly Property CustomerIDColumn As Global.System.Data.DataColumn
                Get
                    Return Me.columnCustomerID
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Public ReadOnly Property EmployeeIDColumn As Global.System.Data.DataColumn
                Get
                    Return Me.columnEmployeeID
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Public ReadOnly Property RequiredDateColumn As Global.System.Data.DataColumn
                Get
                    Return Me.columnRequiredDate
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Public ReadOnly Property ShipViaColumn As Global.System.Data.DataColumn
                Get
                    Return Me.columnShipVia
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Public ReadOnly Property FreightColumn As Global.System.Data.DataColumn
                Get
                    Return Me.columnFreight
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.ComponentModel.BrowsableAttribute(False)>
            Public ReadOnly Property Count As Integer
                Get
                    Return Me.Rows.Count
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Default Public ReadOnly Property Item(ByVal index As Integer) As OrdersRow
                Get
                    Return CType((Me.Rows(index)), WindowsApplication3.nwindDataSet.OrdersRow)
                End Get
            End Property

            Public Event OrdersRowChanging As WindowsApplication3.nwindDataSet.OrdersRowChangeEventHandler

            Public Event OrdersRowChanged As WindowsApplication3.nwindDataSet.OrdersRowChangeEventHandler

            Public Event OrdersRowDeleting As WindowsApplication3.nwindDataSet.OrdersRowChangeEventHandler

            Public Event OrdersRowDeleted As WindowsApplication3.nwindDataSet.OrdersRowChangeEventHandler

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Public Sub AddOrdersRow(ByVal row As WindowsApplication3.nwindDataSet.OrdersRow)
                Me.Rows.Add(row)
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Public Function AddOrdersRow(ByVal CustomerID As String, ByVal EmployeeID As Integer, ByVal RequiredDate As System.DateTime, ByVal ShipVia As Integer, ByVal Freight As Decimal) As OrdersRow
                Dim rowOrdersRow As WindowsApplication3.nwindDataSet.OrdersRow = CType((Me.NewRow()), WindowsApplication3.nwindDataSet.OrdersRow)
                Dim columnValuesArray As Object() = New Object() {Nothing, CustomerID, EmployeeID, RequiredDate, ShipVia, Freight}
                rowOrdersRow.ItemArray = columnValuesArray
                Me.Rows.Add(rowOrdersRow)
                Return rowOrdersRow
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Public Function FindByOrderID(ByVal OrderID As Integer) As OrdersRow
                Return CType((Me.Rows.Find(New Object() {OrderID})), WindowsApplication3.nwindDataSet.OrdersRow)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
                Return Me.Rows.GetEnumerator()
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Public Overrides Function Clone() As Global.System.Data.DataTable
                Dim cln As WindowsApplication3.nwindDataSet.OrdersDataTable = CType((MyBase.Clone()), WindowsApplication3.nwindDataSet.OrdersDataTable)
                cln.InitVars()
                Return cln
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
                Return New WindowsApplication3.nwindDataSet.OrdersDataTable()
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Friend Sub InitVars()
                Me.columnOrderID = Me.Columns("OrderID")
                Me.columnCustomerID = Me.Columns("CustomerID")
                Me.columnEmployeeID = Me.Columns("EmployeeID")
                Me.columnRequiredDate = Me.Columns("RequiredDate")
                Me.columnShipVia = Me.Columns("ShipVia")
                Me.columnFreight = Me.Columns("Freight")
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Private Sub InitClass()
                Me.columnOrderID = New Global.System.Data.DataColumn("OrderID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                Me.Columns.Add(Me.columnOrderID)
                Me.columnCustomerID = New Global.System.Data.DataColumn("CustomerID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                Me.Columns.Add(Me.columnCustomerID)
                Me.columnEmployeeID = New Global.System.Data.DataColumn("EmployeeID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                Me.Columns.Add(Me.columnEmployeeID)
                Me.columnRequiredDate = New Global.System.Data.DataColumn("RequiredDate", GetType(Global.System.DateTime), Nothing, Global.System.Data.MappingType.Element)
                Me.Columns.Add(Me.columnRequiredDate)
                Me.columnShipVia = New Global.System.Data.DataColumn("ShipVia", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                Me.Columns.Add(Me.columnShipVia)
                Me.columnFreight = New Global.System.Data.DataColumn("Freight", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
                Me.Columns.Add(Me.columnFreight)
                Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnOrderID}, True))
                Me.columnOrderID.AutoIncrement = True
                Me.columnOrderID.AllowDBNull = False
                Me.columnOrderID.Unique = True
                Me.columnCustomerID.MaxLength = 5
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Public Function NewOrdersRow() As OrdersRow
                Return CType((Me.NewRow()), WindowsApplication3.nwindDataSet.OrdersRow)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
                Return New WindowsApplication3.nwindDataSet.OrdersRow(builder)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Protected Overrides Function GetRowType() As Global.System.Type
                Return GetType(WindowsApplication3.nwindDataSet.OrdersRow)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanged(e)
                RaiseEvent OrdersRowChanged(Me, New WindowsApplication3.nwindDataSet.OrdersRowChangeEvent(CType((e.Row), WindowsApplication3.nwindDataSet.OrdersRow), e.Action))
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanging(e)
                RaiseEvent OrdersRowChanging(Me, New WindowsApplication3.nwindDataSet.OrdersRowChangeEvent(CType((e.Row), WindowsApplication3.nwindDataSet.OrdersRow), e.Action))
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleted(e)
                RaiseEvent OrdersRowDeleted(Me, New WindowsApplication3.nwindDataSet.OrdersRowChangeEvent(CType((e.Row), WindowsApplication3.nwindDataSet.OrdersRow), e.Action))
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleting(e)
                RaiseEvent OrdersRowDeleting(Me, New WindowsApplication3.nwindDataSet.OrdersRowChangeEvent(CType((e.Row), WindowsApplication3.nwindDataSet.OrdersRow), e.Action))
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Public Sub RemoveOrdersRow(ByVal row As WindowsApplication3.nwindDataSet.OrdersRow)
                Me.Rows.Remove(row)
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
                Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
                Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
                Dim ds As WindowsApplication3.nwindDataSet = New WindowsApplication3.nwindDataSet()
                Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
                any1.[Namespace] = "http://www.w3.org/2001/XMLSchema"
                any1.MinOccurs = New Decimal(0)
                any1.MaxOccurs = Decimal.MaxValue
                any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any1)
                Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
                any2.[Namespace] = "urn:schemas-microsoft-com:xml-diffgram-v1"
                any2.MinOccurs = New Decimal(1)
                any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any2)
                Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
                attribute1.Name = "namespace"
                attribute1.FixedValue = ds.[Namespace]
                type.Attributes.Add(attribute1)
                Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
                attribute2.Name = "tableTypeName"
                attribute2.FixedValue = "OrdersDataTable"
                type.Attributes.Add(attribute2)
                type.Particle = sequence
                Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable()
                If xs.Contains(dsSchema.TargetNamespace) Then
                    Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                    Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                    Try
                        Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                        dsSchema.Write(s1)
                        Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(CStr((dsSchema.TargetNamespace))).GetEnumerator()
                        While schemas.MoveNext()
                            schema = CType((schemas.Current), Global.System.Xml.Schema.XmlSchema)
                            s2.SetLength(0)
                            schema.Write(s2)
                            If(s1.Length = s2.Length) Then
                                s1.Position = 0
                                s2.Position = 0
                                While((s1.Position <> s1.Length) AndAlso (s1.ReadByte() = s2.ReadByte()))
                                End While

                                If(s1.Position = s1.Length) Then
                                    Return type
                                End If
                            End If
                        End While
                    Finally
                        If(s1 IsNot Nothing) Then
                            s1.Close()
                        End If

                        If(s2 IsNot Nothing) Then
                            s2.Close()
                        End If
                    End Try
                End If

                xs.Add(dsSchema)
                Return type
            End Function
        End Class

        ''' <summary>
        ''' Represents strongly named DataRow class.
        ''' </summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>
        Public Partial Class Order_DetailsRow
            Inherits Global.System.Data.DataRow

            Private tableOrder_Details As WindowsApplication3.nwindDataSet.Order_DetailsDataTable

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
                MyBase.New(rb)
                Me.tableOrder_Details = CType((Me.Table), WindowsApplication3.nwindDataSet.Order_DetailsDataTable)
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Public Property OrderID As Integer
                Get
                    Return(CInt((Me(Me.tableOrder_Details.OrderIDColumn))))
                End Get

                Set(ByVal value As Integer)
                    Me(Me.tableOrder_Details.OrderIDColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Public Property ProductID As Integer
                Get
                    Return(CInt((Me(Me.tableOrder_Details.ProductIDColumn))))
                End Get

                Set(ByVal value As Integer)
                    Me(Me.tableOrder_Details.ProductIDColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Public Property UnitPrice As Decimal
                Get
                    Try
                        Return(CDec((Me(Me.tableOrder_Details.UnitPriceColumn))))
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'UnitPrice' in table 'Order Details' is DBNull.", e)
                    End Try
                End Get

                Set(ByVal value As Decimal)
                    Me(Me.tableOrder_Details.UnitPriceColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Public Property Quantity As Short
                Get
                    Try
                        Return(CShort((Me(Me.tableOrder_Details.QuantityColumn))))
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Quantity' in table 'Order Details' is DBNull.", e)
                    End Try
                End Get

                Set(ByVal value As Short)
                    Me(Me.tableOrder_Details.QuantityColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Public Property OrdersRow As OrdersRow
                Get
                    Return CType((Me.GetParentRow(Me.Table.ParentRelations("OrdersOrder Details"))), WindowsApplication3.nwindDataSet.OrdersRow)
                End Get

                Set(ByVal value As OrdersRow)
                    Me.SetParentRow(value, Me.Table.ParentRelations("OrdersOrder Details"))
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Public Function IsUnitPriceNull() As Boolean
                Return Me.IsNull(Me.tableOrder_Details.UnitPriceColumn)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Public Sub SetUnitPriceNull()
                Me(Me.tableOrder_Details.UnitPriceColumn) = Global.System.Convert.DBNull
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Public Function IsQuantityNull() As Boolean
                Return Me.IsNull(Me.tableOrder_Details.QuantityColumn)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Public Sub SetQuantityNull()
                Me(Me.tableOrder_Details.QuantityColumn) = Global.System.Convert.DBNull
            End Sub
        End Class

        ''' <summary>
        ''' Represents strongly named DataRow class.
        ''' </summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>
        Public Partial Class OrdersRow
            Inherits Global.System.Data.DataRow

            Private tableOrders As WindowsApplication3.nwindDataSet.OrdersDataTable

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
                MyBase.New(rb)
                Me.tableOrders = CType((Me.Table), WindowsApplication3.nwindDataSet.OrdersDataTable)
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Public Property OrderID As Integer
                Get
                    Return(CInt((Me(Me.tableOrders.OrderIDColumn))))
                End Get

                Set(ByVal value As Integer)
                    Me(Me.tableOrders.OrderIDColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Public Property CustomerID As String
                Get
                    Try
                        Return(CStr((Me(Me.tableOrders.CustomerIDColumn))))
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'CustomerID' in table 'Orders' is DBNull.", e)
                    End Try
                End Get

                Set(ByVal value As String)
                    Me(Me.tableOrders.CustomerIDColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Public Property EmployeeID As Integer
                Get
                    Try
                        Return(CInt((Me(Me.tableOrders.EmployeeIDColumn))))
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'EmployeeID' in table 'Orders' is DBNull.", e)
                    End Try
                End Get

                Set(ByVal value As Integer)
                    Me(Me.tableOrders.EmployeeIDColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Public Property RequiredDate As System.DateTime
                Get
                    Try
                        Return(CDate((Me(Me.tableOrders.RequiredDateColumn))))
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'RequiredDate' in table 'Orders' is DBNull.", e)
                    End Try
                End Get

                Set(ByVal value As System.DateTime)
                    Me(Me.tableOrders.RequiredDateColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Public Property ShipVia As Integer
                Get
                    Try
                        Return(CInt((Me(Me.tableOrders.ShipViaColumn))))
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'ShipVia' in table 'Orders' is DBNull.", e)
                    End Try
                End Get

                Set(ByVal value As Integer)
                    Me(Me.tableOrders.ShipViaColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Public Property Freight As Decimal
                Get
                    Try
                        Return(CDec((Me(Me.tableOrders.FreightColumn))))
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Freight' in table 'Orders' is DBNull.", e)
                    End Try
                End Get

                Set(ByVal value As Decimal)
                    Me(Me.tableOrders.FreightColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Public Function IsCustomerIDNull() As Boolean
                Return Me.IsNull(Me.tableOrders.CustomerIDColumn)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Public Sub SetCustomerIDNull()
                Me(Me.tableOrders.CustomerIDColumn) = Global.System.Convert.DBNull
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Public Function IsEmployeeIDNull() As Boolean
                Return Me.IsNull(Me.tableOrders.EmployeeIDColumn)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Public Sub SetEmployeeIDNull()
                Me(Me.tableOrders.EmployeeIDColumn) = Global.System.Convert.DBNull
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Public Function IsRequiredDateNull() As Boolean
                Return Me.IsNull(Me.tableOrders.RequiredDateColumn)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Public Sub SetRequiredDateNull()
                Me(Me.tableOrders.RequiredDateColumn) = Global.System.Convert.DBNull
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Public Function IsShipViaNull() As Boolean
                Return Me.IsNull(Me.tableOrders.ShipViaColumn)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Public Sub SetShipViaNull()
                Me(Me.tableOrders.ShipViaColumn) = Global.System.Convert.DBNull
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Public Function IsFreightNull() As Boolean
                Return Me.IsNull(Me.tableOrders.FreightColumn)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Public Sub SetFreightNull()
                Me(Me.tableOrders.FreightColumn) = Global.System.Convert.DBNull
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Public Function GetOrder_DetailsRows() As WindowsApplication3.nwindDataSet.Order_DetailsRow()
                If(Me.Table.ChildRelations("OrdersOrder Details") Is Nothing) Then
                    Return New WindowsApplication3.nwindDataSet.Order_DetailsRow(-1) {}
                Else
                    Return CType((Me.GetChildRows(Me.Table.ChildRelations("OrdersOrder Details"))), WindowsApplication3.nwindDataSet.Order_DetailsRow())
                End If
            End Function
        End Class

        ''' <summary>
        ''' Row event argument class
        ''' </summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>
        Public Class Order_DetailsRowChangeEvent
            Inherits Global.System.EventArgs

            Private eventRow As WindowsApplication3.nwindDataSet.Order_DetailsRow

            Private eventAction As Global.System.Data.DataRowAction

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Public Sub New(ByVal row As WindowsApplication3.nwindDataSet.Order_DetailsRow, ByVal action As Global.System.Data.DataRowAction)
                Me.eventRow = row
                Me.eventAction = action
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Public ReadOnly Property Row As Order_DetailsRow
                Get
                    Return Me.eventRow
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Public ReadOnly Property Action As Global.System.Data.DataRowAction
                Get
                    Return Me.eventAction
                End Get
            End Property
        End Class

        ''' <summary>
        ''' Row event argument class
        ''' </summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>
        Public Class OrdersRowChangeEvent
            Inherits Global.System.EventArgs

            Private eventRow As WindowsApplication3.nwindDataSet.OrdersRow

            Private eventAction As Global.System.Data.DataRowAction

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Public Sub New(ByVal row As WindowsApplication3.nwindDataSet.OrdersRow, ByVal action As Global.System.Data.DataRowAction)
                Me.eventRow = row
                Me.eventAction = action
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Public ReadOnly Property Row As OrdersRow
                Get
                    Return Me.eventRow
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Public ReadOnly Property Action As Global.System.Data.DataRowAction
                Get
                    Return Me.eventAction
                End Get
            End Property
        End Class
    End Class
End Namespace

Namespace WindowsApplication3.nwindDataSetTableAdapters

    ''' <summary>
    ''' Represents the connection and commands used to retrieve and save data.
    ''' </summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code")>
    <Global.System.ComponentModel.ToolboxItemAttribute(True)>
    <Global.System.ComponentModel.DataObjectAttribute(True)>
    <Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")>
    <Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
    Public Partial Class Order_DetailsTableAdapter
        Inherits Global.System.ComponentModel.Component

        Private _adapter As Global.System.Data.OleDb.OleDbDataAdapter

        Private _connection As Global.System.Data.OleDb.OleDbConnection

        Private _commandCollection As Global.System.Data.OleDb.OleDbCommand()

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        Public Sub New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        Private ReadOnly Property Adapter As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If(Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If

                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        Friend Property Connection As Global.System.Data.OleDb.OleDbConnection
            Get
                If(Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If

                Return Me._connection
            End Get

            Set(ByVal value As Global.System.Data.OleDb.OleDbConnection)
                Me._connection = value
                If(Me.Adapter.InsertCommand IsNot Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If

                If(Me.Adapter.DeleteCommand IsNot Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If

                If(Me.Adapter.UpdateCommand IsNot Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If

                Dim i As Integer = 0
                While(i < Me.CommandCollection.Length)
                    If(Me.CommandCollection(i) IsNot Nothing) Then
                        CType((Me.CommandCollection(CInt((i)))), Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If

                    i =(i + 1)
                End While
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        Protected ReadOnly Property CommandCollection As Global.System.Data.OleDb.OleDbCommand()
            Get
                If(Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If

                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        Public Property ClearBeforeFill As Boolean
            Get
                Return Me._clearBeforeFill
            End Get

            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Order Details"
            tableMapping.ColumnMappings.Add("OrderID", "OrderID")
            tableMapping.ColumnMappings.Add("ProductID", "ProductID")
            tableMapping.ColumnMappings.Add("UnitPrice", "UnitPrice")
            tableMapping.ColumnMappings.Add("Quantity", "Quantity")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.OleDb.OleDbCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM `Order Details` WHERE ((`OrderID` = ?) AND (`ProductID` = ?) AND ((? " & "= 1 AND `UnitPrice` IS NULL) OR (`UnitPrice` = ?)) AND ((? = 1 AND `Quantity` IS" & " NULL) OR (`Quantity` = ?)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_OrderID", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, (CByte((0))), (CByte((0))), "OrderID", Global.System.Data.DataRowVersion.Original, False, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ProductID", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, (CByte((0))), (CByte((0))), "ProductID", Global.System.Data.DataRowVersion.Original, False, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_UnitPrice", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, (CByte((0))), (CByte((0))), "UnitPrice", Global.System.Data.DataRowVersion.Original, True, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_UnitPrice", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, (CByte((0))), (CByte((0))), "UnitPrice", Global.System.Data.DataRowVersion.Original, False, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Quantity", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, (CByte((0))), (CByte((0))), "Quantity", Global.System.Data.DataRowVersion.Original, True, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Quantity", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, (CByte((0))), (CByte((0))), "Quantity", Global.System.Data.DataRowVersion.Original, False, Nothing))
            Me._adapter.UpdateCommand = New Global.System.Data.OleDb.OleDbCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE `Order Details` SET `OrderID` = ?, `ProductID` = ?, `UnitPrice` = ?, `Quan" & "tity` = ? WHERE ((`OrderID` = ?) AND (`ProductID` = ?) AND ((? = 1 AND `UnitPric" & "e` IS NULL) OR (`UnitPrice` = ?)) AND ((? = 1 AND `Quantity` IS NULL) OR (`Quant" & "ity` = ?)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("OrderID", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, (CByte((0))), (CByte((0))), "OrderID", Global.System.Data.DataRowVersion.Current, False, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ProductID", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, (CByte((0))), (CByte((0))), "ProductID", Global.System.Data.DataRowVersion.Current, False, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("UnitPrice", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, (CByte((0))), (CByte((0))), "UnitPrice", Global.System.Data.DataRowVersion.Current, False, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Quantity", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, (CByte((0))), (CByte((0))), "Quantity", Global.System.Data.DataRowVersion.Current, False, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_OrderID", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, (CByte((0))), (CByte((0))), "OrderID", Global.System.Data.DataRowVersion.Original, False, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ProductID", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, (CByte((0))), (CByte((0))), "ProductID", Global.System.Data.DataRowVersion.Original, False, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_UnitPrice", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, (CByte((0))), (CByte((0))), "UnitPrice", Global.System.Data.DataRowVersion.Original, True, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_UnitPrice", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, (CByte((0))), (CByte((0))), "UnitPrice", Global.System.Data.DataRowVersion.Original, False, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Quantity", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, (CByte((0))), (CByte((0))), "Quantity", Global.System.Data.DataRowVersion.Original, True, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Quantity", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, (CByte((0))), (CByte((0))), "Quantity", Global.System.Data.DataRowVersion.Original, False, Nothing))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection()
            Me._connection.ConnectionString = Global.WindowsApplication3.Properties.Settings.[Default].nwindConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand()
            Me._commandCollection(CInt((0))).Connection = Me.Connection
            Me._commandCollection(CInt((0))).CommandText = "SELECT OrderID, ProductID, UnitPrice, Quantity FROM [Order Details]"
            Me._commandCollection(CInt((0))).CommandType = Global.System.Data.CommandType.Text
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
        <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)>
        Public Overridable Function Fill(ByVal dataTable As WindowsApplication3.nwindDataSet.Order_DetailsDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If(Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If

            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
        <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)>
        Public Overridable Function GetData() As WindowsApplication3.nwindDataSet.Order_DetailsDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As WindowsApplication3.nwindDataSet.Order_DetailsDataTable = New WindowsApplication3.nwindDataSet.Order_DetailsDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
        Public Overridable Function Update(ByVal dataTable As WindowsApplication3.nwindDataSet.Order_DetailsDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
        Public Overridable Function Update(ByVal dataSet As WindowsApplication3.nwindDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "Order Details")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
        Public Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
        Public Overridable Function Update(ByVal dataRows As Global.System.Data.DataRow()) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
        <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)>
        Public Overridable Function Delete(ByVal Original_OrderID As Global.System.Nullable(Of Integer), ByVal Original_ProductID As Integer, ByVal Original_UnitPrice As Decimal, ByVal Original_Quantity As Short) As Integer
            If(Original_OrderID.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(CInt((0))).Value =(CInt((Original_OrderID.Value)))
            Else
                Me.Adapter.DeleteCommand.Parameters(CInt((0))).Value = Global.System.DBNull.Value
            End If

            Me.Adapter.DeleteCommand.Parameters(CInt((1))).Value =(CInt((Original_ProductID)))
            Me.Adapter.DeleteCommand.Parameters(CInt((2))).Value =(CObj((0)))
            Me.Adapter.DeleteCommand.Parameters(CInt((3))).Value =(CDec((Original_UnitPrice)))
            Me.Adapter.DeleteCommand.Parameters(CInt((4))).Value =(CObj((0)))
            Me.Adapter.DeleteCommand.Parameters(CInt((5))).Value =(CShort((Original_Quantity)))
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If

            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery()
                Return returnValue
            Finally
                If(previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
        <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)>
        Public Overridable Function Update(ByVal OrderID As Global.System.Nullable(Of Integer), ByVal ProductID As Integer, ByVal UnitPrice As Decimal, ByVal Quantity As Short, ByVal Original_OrderID As Global.System.Nullable(Of Integer), ByVal Original_ProductID As Integer, ByVal Original_UnitPrice As Decimal, ByVal Original_Quantity As Short) As Integer
            If(OrderID.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(CInt((0))).Value =(CInt((OrderID.Value)))
            Else
                Me.Adapter.UpdateCommand.Parameters(CInt((0))).Value = Global.System.DBNull.Value
            End If

            Me.Adapter.UpdateCommand.Parameters(CInt((1))).Value =(CInt((ProductID)))
            Me.Adapter.UpdateCommand.Parameters(CInt((2))).Value =(CDec((UnitPrice)))
            Me.Adapter.UpdateCommand.Parameters(CInt((3))).Value =(CShort((Quantity)))
            If(Original_OrderID.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(CInt((4))).Value =(CInt((Original_OrderID.Value)))
            Else
                Me.Adapter.UpdateCommand.Parameters(CInt((4))).Value = Global.System.DBNull.Value
            End If

            Me.Adapter.UpdateCommand.Parameters(CInt((5))).Value =(CInt((Original_ProductID)))
            Me.Adapter.UpdateCommand.Parameters(CInt((6))).Value =(CObj((0)))
            Me.Adapter.UpdateCommand.Parameters(CInt((7))).Value =(CDec((Original_UnitPrice)))
            Me.Adapter.UpdateCommand.Parameters(CInt((8))).Value =(CObj((0)))
            Me.Adapter.UpdateCommand.Parameters(CInt((9))).Value =(CShort((Original_Quantity)))
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If

            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery()
                Return returnValue
            Finally
                If(previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
        <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)>
        Public Overridable Function Update(ByVal UnitPrice As Decimal, ByVal Quantity As Short, ByVal Original_OrderID As Global.System.Nullable(Of Integer), ByVal Original_ProductID As Integer, ByVal Original_UnitPrice As Decimal, ByVal Original_Quantity As Short) As Integer
            Return Me.Update(Original_OrderID, Original_ProductID, UnitPrice, Quantity, Original_OrderID, Original_ProductID, Original_UnitPrice, Original_Quantity)
        End Function
    End Class

    ''' <summary>
    ''' Represents the connection and commands used to retrieve and save data.
    ''' </summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code")>
    <Global.System.ComponentModel.ToolboxItemAttribute(True)>
    <Global.System.ComponentModel.DataObjectAttribute(True)>
    <Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")>
    <Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
    Public Partial Class OrdersTableAdapter
        Inherits Global.System.ComponentModel.Component

        Private _adapter As Global.System.Data.OleDb.OleDbDataAdapter

        Private _connection As Global.System.Data.OleDb.OleDbConnection

        Private _commandCollection As Global.System.Data.OleDb.OleDbCommand()

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        Public Sub New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        Private ReadOnly Property Adapter As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If(Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If

                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        Friend Property Connection As Global.System.Data.OleDb.OleDbConnection
            Get
                If(Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If

                Return Me._connection
            End Get

            Set(ByVal value As Global.System.Data.OleDb.OleDbConnection)
                Me._connection = value
                If(Me.Adapter.InsertCommand IsNot Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If

                If(Me.Adapter.DeleteCommand IsNot Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If

                If(Me.Adapter.UpdateCommand IsNot Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If

                Dim i As Integer = 0
                While(i < Me.CommandCollection.Length)
                    If(Me.CommandCollection(i) IsNot Nothing) Then
                        CType((Me.CommandCollection(CInt((i)))), Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If

                    i =(i + 1)
                End While
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        Protected ReadOnly Property CommandCollection As Global.System.Data.OleDb.OleDbCommand()
            Get
                If(Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If

                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        Public Property ClearBeforeFill As Boolean
            Get
                Return Me._clearBeforeFill
            End Get

            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Orders"
            tableMapping.ColumnMappings.Add("OrderID", "OrderID")
            tableMapping.ColumnMappings.Add("CustomerID", "CustomerID")
            tableMapping.ColumnMappings.Add("EmployeeID", "EmployeeID")
            tableMapping.ColumnMappings.Add("RequiredDate", "RequiredDate")
            tableMapping.ColumnMappings.Add("ShipVia", "ShipVia")
            tableMapping.ColumnMappings.Add("Freight", "Freight")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.OleDb.OleDbCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM `Orders` WHERE ((`OrderID` = ?) AND ((? = 1 AND `CustomerID` IS NULL) OR (`CustomerID` = ?)) AND ((? = 1 AND `EmployeeID` IS NULL) OR (`EmployeeID` = ?)) AND ((? = 1 AND `RequiredDate` IS NULL) OR (`RequiredDate` = ?)) AND ((? = 1 AND `ShipVia` IS NULL) OR (`ShipVia` = ?)) AND ((? = 1 AND `Freight` IS NULL) OR (`Freight` = ?)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_OrderID", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, (CByte((0))), (CByte((0))), "OrderID", Global.System.Data.DataRowVersion.Original, False, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_CustomerID", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, (CByte((0))), (CByte((0))), "CustomerID", Global.System.Data.DataRowVersion.Original, True, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_CustomerID", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte((0))), (CByte((0))), "CustomerID", Global.System.Data.DataRowVersion.Original, False, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_EmployeeID", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, (CByte((0))), (CByte((0))), "EmployeeID", Global.System.Data.DataRowVersion.Original, True, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_EmployeeID", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, (CByte((0))), (CByte((0))), "EmployeeID", Global.System.Data.DataRowVersion.Original, False, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_RequiredDate", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, (CByte((0))), (CByte((0))), "RequiredDate", Global.System.Data.DataRowVersion.Original, True, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_RequiredDate", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, (CByte((0))), (CByte((0))), "RequiredDate", Global.System.Data.DataRowVersion.Original, False, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ShipVia", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, (CByte((0))), (CByte((0))), "ShipVia", Global.System.Data.DataRowVersion.Original, True, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ShipVia", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, (CByte((0))), (CByte((0))), "ShipVia", Global.System.Data.DataRowVersion.Original, False, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Freight", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, (CByte((0))), (CByte((0))), "Freight", Global.System.Data.DataRowVersion.Original, True, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Freight", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, (CByte((0))), (CByte((0))), "Freight", Global.System.Data.DataRowVersion.Original, False, Nothing))
            Me._adapter.InsertCommand = New Global.System.Data.OleDb.OleDbCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `Orders` (`CustomerID`, `EmployeeID`, `RequiredDate`, `ShipVia`, `Fre" & "ight`) VALUES (?, ?, ?, ?, ?)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CustomerID", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte((0))), (CByte((0))), "CustomerID", Global.System.Data.DataRowVersion.Current, False, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("EmployeeID", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, (CByte((0))), (CByte((0))), "EmployeeID", Global.System.Data.DataRowVersion.Current, False, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("RequiredDate", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, (CByte((0))), (CByte((0))), "RequiredDate", Global.System.Data.DataRowVersion.Current, False, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ShipVia", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, (CByte((0))), (CByte((0))), "ShipVia", Global.System.Data.DataRowVersion.Current, False, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Freight", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, (CByte((0))), (CByte((0))), "Freight", Global.System.Data.DataRowVersion.Current, False, Nothing))
            Me._adapter.UpdateCommand = New Global.System.Data.OleDb.OleDbCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE `Orders` SET `CustomerID` = ?, `EmployeeID` = ?, `RequiredDate` = ?, `ShipVia` = ?, `Freight` = ? WHERE ((`OrderID` = ?) AND ((? = 1 AND `CustomerID` IS NULL) OR (`CustomerID` = ?)) AND ((? = 1 AND `EmployeeID` IS NULL) OR (`EmployeeID` = ?)) AND ((? = 1 AND `RequiredDate` IS NULL) OR (`RequiredDate` = ?)) AND ((? = 1 AND `ShipVia` IS NULL) OR (`ShipVia` = ?)) AND ((? = 1 AND `Freight` IS NULL) OR (`Freight` = ?)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CustomerID", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte((0))), (CByte((0))), "CustomerID", Global.System.Data.DataRowVersion.Current, False, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("EmployeeID", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, (CByte((0))), (CByte((0))), "EmployeeID", Global.System.Data.DataRowVersion.Current, False, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("RequiredDate", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, (CByte((0))), (CByte((0))), "RequiredDate", Global.System.Data.DataRowVersion.Current, False, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ShipVia", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, (CByte((0))), (CByte((0))), "ShipVia", Global.System.Data.DataRowVersion.Current, False, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Freight", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, (CByte((0))), (CByte((0))), "Freight", Global.System.Data.DataRowVersion.Current, False, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_OrderID", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, (CByte((0))), (CByte((0))), "OrderID", Global.System.Data.DataRowVersion.Original, False, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_CustomerID", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, (CByte((0))), (CByte((0))), "CustomerID", Global.System.Data.DataRowVersion.Original, True, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_CustomerID", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte((0))), (CByte((0))), "CustomerID", Global.System.Data.DataRowVersion.Original, False, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_EmployeeID", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, (CByte((0))), (CByte((0))), "EmployeeID", Global.System.Data.DataRowVersion.Original, True, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_EmployeeID", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, (CByte((0))), (CByte((0))), "EmployeeID", Global.System.Data.DataRowVersion.Original, False, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_RequiredDate", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, (CByte((0))), (CByte((0))), "RequiredDate", Global.System.Data.DataRowVersion.Original, True, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_RequiredDate", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, (CByte((0))), (CByte((0))), "RequiredDate", Global.System.Data.DataRowVersion.Original, False, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ShipVia", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, (CByte((0))), (CByte((0))), "ShipVia", Global.System.Data.DataRowVersion.Original, True, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ShipVia", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, (CByte((0))), (CByte((0))), "ShipVia", Global.System.Data.DataRowVersion.Original, False, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Freight", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, (CByte((0))), (CByte((0))), "Freight", Global.System.Data.DataRowVersion.Original, True, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Freight", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, (CByte((0))), (CByte((0))), "Freight", Global.System.Data.DataRowVersion.Original, False, Nothing))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection()
            Me._connection.ConnectionString = Global.WindowsApplication3.Properties.Settings.[Default].nwindConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand()
            Me._commandCollection(CInt((0))).Connection = Me.Connection
            Me._commandCollection(CInt((0))).CommandText = "SELECT OrderID, CustomerID, EmployeeID, RequiredDate, ShipVia, Freight FROM Order" & "s"
            Me._commandCollection(CInt((0))).CommandType = Global.System.Data.CommandType.Text
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
        <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)>
        Public Overridable Function Fill(ByVal dataTable As WindowsApplication3.nwindDataSet.OrdersDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If(Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If

            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
        <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)>
        Public Overridable Function GetData() As WindowsApplication3.nwindDataSet.OrdersDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As WindowsApplication3.nwindDataSet.OrdersDataTable = New WindowsApplication3.nwindDataSet.OrdersDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
        Public Overridable Function Update(ByVal dataTable As WindowsApplication3.nwindDataSet.OrdersDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
        Public Overridable Function Update(ByVal dataSet As WindowsApplication3.nwindDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "Orders")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
        Public Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
        Public Overridable Function Update(ByVal dataRows As Global.System.Data.DataRow()) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
        <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)>
        Public Overridable Function Delete(ByVal Original_OrderID As Integer, ByVal Original_CustomerID As String, ByVal Original_EmployeeID As Global.System.Nullable(Of Integer), ByVal Original_RequiredDate As Global.System.Nullable(Of Global.System.DateTime), ByVal Original_ShipVia As Global.System.Nullable(Of Integer), ByVal Original_Freight As Global.System.Nullable(Of Decimal)) As Integer
            Me.Adapter.DeleteCommand.Parameters(CInt((0))).Value =(CInt((Original_OrderID)))
            If(Equals(Original_CustomerID, Nothing)) Then
                Me.Adapter.DeleteCommand.Parameters(CInt((1))).Value =(CObj((1)))
                Me.Adapter.DeleteCommand.Parameters(CInt((2))).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(CInt((1))).Value =(CObj((0)))
                Me.Adapter.DeleteCommand.Parameters(CInt((2))).Value =(CStr((Original_CustomerID)))
            End If

            If(Original_EmployeeID.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(CInt((3))).Value =(CObj((0)))
                Me.Adapter.DeleteCommand.Parameters(CInt((4))).Value =(CInt((Original_EmployeeID.Value)))
            Else
                Me.Adapter.DeleteCommand.Parameters(CInt((3))).Value =(CObj((1)))
                Me.Adapter.DeleteCommand.Parameters(CInt((4))).Value = Global.System.DBNull.Value
            End If

            If(Original_RequiredDate.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(CInt((5))).Value =(CObj((0)))
                Me.Adapter.DeleteCommand.Parameters(CInt((6))).Value =(CDate((Original_RequiredDate.Value)))
            Else
                Me.Adapter.DeleteCommand.Parameters(CInt((5))).Value =(CObj((1)))
                Me.Adapter.DeleteCommand.Parameters(CInt((6))).Value = Global.System.DBNull.Value
            End If

            If(Original_ShipVia.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(CInt((7))).Value =(CObj((0)))
                Me.Adapter.DeleteCommand.Parameters(CInt((8))).Value =(CInt((Original_ShipVia.Value)))
            Else
                Me.Adapter.DeleteCommand.Parameters(CInt((7))).Value =(CObj((1)))
                Me.Adapter.DeleteCommand.Parameters(CInt((8))).Value = Global.System.DBNull.Value
            End If

            If(Original_Freight.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(CInt((9))).Value =(CObj((0)))
                Me.Adapter.DeleteCommand.Parameters(CInt((10))).Value =(CDec((Original_Freight.Value)))
            Else
                Me.Adapter.DeleteCommand.Parameters(CInt((9))).Value =(CObj((1)))
                Me.Adapter.DeleteCommand.Parameters(CInt((10))).Value = Global.System.DBNull.Value
            End If

            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If

            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery()
                Return returnValue
            Finally
                If(previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
        <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)>
        Public Overridable Function Insert(ByVal CustomerID As String, ByVal EmployeeID As Global.System.Nullable(Of Integer), ByVal RequiredDate As Global.System.Nullable(Of Global.System.DateTime), ByVal ShipVia As Global.System.Nullable(Of Integer), ByVal Freight As Global.System.Nullable(Of Decimal)) As Integer
            If(Equals(CustomerID, Nothing)) Then
                Me.Adapter.InsertCommand.Parameters(CInt((0))).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(CInt((0))).Value =(CStr((CustomerID)))
            End If

            If(EmployeeID.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(CInt((1))).Value =(CInt((EmployeeID.Value)))
            Else
                Me.Adapter.InsertCommand.Parameters(CInt((1))).Value = Global.System.DBNull.Value
            End If

            If(RequiredDate.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(CInt((2))).Value =(CDate((RequiredDate.Value)))
            Else
                Me.Adapter.InsertCommand.Parameters(CInt((2))).Value = Global.System.DBNull.Value
            End If

            If(ShipVia.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(CInt((3))).Value =(CInt((ShipVia.Value)))
            Else
                Me.Adapter.InsertCommand.Parameters(CInt((3))).Value = Global.System.DBNull.Value
            End If

            If(Freight.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(CInt((4))).Value =(CDec((Freight.Value)))
            Else
                Me.Adapter.InsertCommand.Parameters(CInt((4))).Value = Global.System.DBNull.Value
            End If

            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If

            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery()
                Return returnValue
            Finally
                If(previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
        <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)>
        Public Overridable Function Update(ByVal CustomerID As String, ByVal EmployeeID As Global.System.Nullable(Of Integer), ByVal RequiredDate As Global.System.Nullable(Of Global.System.DateTime), ByVal ShipVia As Global.System.Nullable(Of Integer), ByVal Freight As Global.System.Nullable(Of Decimal), ByVal Original_OrderID As Integer, ByVal Original_CustomerID As String, ByVal Original_EmployeeID As Global.System.Nullable(Of Integer), ByVal Original_RequiredDate As Global.System.Nullable(Of Global.System.DateTime), ByVal Original_ShipVia As Global.System.Nullable(Of Integer), ByVal Original_Freight As Global.System.Nullable(Of Decimal)) As Integer
            If(Equals(CustomerID, Nothing)) Then
                Me.Adapter.UpdateCommand.Parameters(CInt((0))).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(CInt((0))).Value =(CStr((CustomerID)))
            End If

            If(EmployeeID.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(CInt((1))).Value =(CInt((EmployeeID.Value)))
            Else
                Me.Adapter.UpdateCommand.Parameters(CInt((1))).Value = Global.System.DBNull.Value
            End If

            If(RequiredDate.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(CInt((2))).Value =(CDate((RequiredDate.Value)))
            Else
                Me.Adapter.UpdateCommand.Parameters(CInt((2))).Value = Global.System.DBNull.Value
            End If

            If(ShipVia.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(CInt((3))).Value =(CInt((ShipVia.Value)))
            Else
                Me.Adapter.UpdateCommand.Parameters(CInt((3))).Value = Global.System.DBNull.Value
            End If

            If(Freight.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(CInt((4))).Value =(CDec((Freight.Value)))
            Else
                Me.Adapter.UpdateCommand.Parameters(CInt((4))).Value = Global.System.DBNull.Value
            End If

            Me.Adapter.UpdateCommand.Parameters(CInt((5))).Value =(CInt((Original_OrderID)))
            If(Equals(Original_CustomerID, Nothing)) Then
                Me.Adapter.UpdateCommand.Parameters(CInt((6))).Value =(CObj((1)))
                Me.Adapter.UpdateCommand.Parameters(CInt((7))).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(CInt((6))).Value =(CObj((0)))
                Me.Adapter.UpdateCommand.Parameters(CInt((7))).Value =(CStr((Original_CustomerID)))
            End If

            If(Original_EmployeeID.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(CInt((8))).Value =(CObj((0)))
                Me.Adapter.UpdateCommand.Parameters(CInt((9))).Value =(CInt((Original_EmployeeID.Value)))
            Else
                Me.Adapter.UpdateCommand.Parameters(CInt((8))).Value =(CObj((1)))
                Me.Adapter.UpdateCommand.Parameters(CInt((9))).Value = Global.System.DBNull.Value
            End If

            If(Original_RequiredDate.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(CInt((10))).Value =(CObj((0)))
                Me.Adapter.UpdateCommand.Parameters(CInt((11))).Value =(CDate((Original_RequiredDate.Value)))
            Else
                Me.Adapter.UpdateCommand.Parameters(CInt((10))).Value =(CObj((1)))
                Me.Adapter.UpdateCommand.Parameters(CInt((11))).Value = Global.System.DBNull.Value
            End If

            If(Original_ShipVia.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(CInt((12))).Value =(CObj((0)))
                Me.Adapter.UpdateCommand.Parameters(CInt((13))).Value =(CInt((Original_ShipVia.Value)))
            Else
                Me.Adapter.UpdateCommand.Parameters(CInt((12))).Value =(CObj((1)))
                Me.Adapter.UpdateCommand.Parameters(CInt((13))).Value = Global.System.DBNull.Value
            End If

            If(Original_Freight.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(CInt((14))).Value =(CObj((0)))
                Me.Adapter.UpdateCommand.Parameters(CInt((15))).Value =(CDec((Original_Freight.Value)))
            Else
                Me.Adapter.UpdateCommand.Parameters(CInt((14))).Value =(CObj((1)))
                Me.Adapter.UpdateCommand.Parameters(CInt((15))).Value = Global.System.DBNull.Value
            End If

            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If

            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery()
                Return returnValue
            Finally
                If(previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function
    End Class
End Namespace
